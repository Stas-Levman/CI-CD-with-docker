


# resources:
#   repositories: 
#   - repository: Weight-tracker-ansible-pipeline
#     type: github
#     name: sincros121/Weight-tracker-ansible-pipeline
#     ref: main
#     endpoint: sincros121

#   - repository: Azure-DevOps-CI-CD      
#     type: github
#     name: sincros121/Azure-DevOps-CI-CD
#     endpoint: sincros121
#     ref: master
#     trigger:
#       batch: true
#       branches:
#         include:
#         - master
#       paths:
#         exclude:
#           - azure-pipelines.yml
#           - templates/*
#           - templates
#           - README.md

#   pipelines:
#     - pipeline: Terraform-pipeline
#       source: Weight tracker terraform
#       trigger:
#         stages:
#         - Stage_infrastructure

trigger:
  # branches:
  #   include:
  #   - '*' 
  paths:
    exclude:
    - azure-pipelines.yml
    - templates/*
    - templates
    - README.md
    - dockerfile
    - .'*'

# pool: 'self-hosted-stas'
pool: azure-vm

stages:
- stage: CI
  displayName: Build
  
  jobs:
  - job: Build
    displayName: Build image

    steps:
    - checkout: self
      displayName: Clone latest web-application repo
    


    - task: Docker@2
      displayName: Docker build
      inputs:
        command: 'build'
        Dockerfile: 'dockerfile'
        tags: '$(Build.BuildId)'
        repository: 'bootcamp-app'
        containerRegistry: 'private-registry'

  
  - job: Push
    displayName: Push to registry
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    dependsOn: Build

    steps:
    - task: Docker@2
      inputs:
        containerRegistry: 'private-registry'
        repository: 'bootcamp-app'
        command: 'push'
        tags: '$(Build.BuildId)'



# - stage: Stage_deployment
#   displayName: Stage
  
#   variables: 
#   - group: vault secrets - stage
#   - name: ip_address
#     value: $(az network public-ip show -g weight-tracker-stage-rg -n front-public-ip --query ipAddress | tr -d '"') 

#   jobs:
#   - deployment: Deploy
#     environment: stage
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - checkout: Weight-tracker-ansible-pipeline
#             displayName: Clone latest ansible repo
          
#           - task: UniversalPackages@0
#             displayName: Download latest artifacts
#             inputs:
#               command: 'download'
#               downloadDirectory: '$(System.DefaultWorkingDirectory)'
#               feedsToUse: 'internal'
#               vstsFeed: '4d568cd9-3258-4c66-8828-30f40b885ad4/fa3b70db-aad3-42de-a3b2-a6d319553542'
#               vstsFeedPackage: 'abb22cc3-69e3-448e-bcb0-4091eee52c00'
#               vstsPackageVersion: '*'

#           - template: templates/env-creation-stage.yaml

#           - task: Ansible@0
#             displayName: Deploy using ansible
#             timeoutInMinutes: 6
#             inputs:
#               ansibleInterface: 'agentMachine'
#               playbookPathOnAgentMachine: '$(System.DefaultWorkingDirectory)/deploy.yaml'
#               inventoriesAgentMachine: 'noInventory'
#               args: '-e "env=$(Environment.Name) admin_password=$(VM-password)" --verbose'
#               failOnStdErr: false

#           - task: DeleteFiles@1
#             displayName: Delete .env file
#             inputs:
#               SourceFolder: '$(System.DefaultWorkingDirectory)'
#               Contents: '.env'
  


# - stage: Prod_deployment
#   displayName: Prod
  
#   variables: 
#   - group: vault secrets - prod
#   - name: ip_address
#     value: $(az network public-ip show -g weight-tracker-prod-rg -n front-public-ip --query ipAddress | tr -d '"') 

#   jobs:
#   - deployment: Deploy
#     environment: prod
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - checkout: Weight-tracker-ansible-pipeline
#             displayName: Clone latest ansible repo
          
#           - task: UniversalPackages@0
#             displayName: Download latest artifacts
#             inputs:
#               command: 'download'
#               downloadDirectory: '$(System.DefaultWorkingDirectory)'
#               feedsToUse: 'internal'
#               vstsFeed: '4d568cd9-3258-4c66-8828-30f40b885ad4/fa3b70db-aad3-42de-a3b2-a6d319553542'
#               vstsFeedPackage: 'abb22cc3-69e3-448e-bcb0-4091eee52c00'
#               vstsPackageVersion: '*'

#           - template: templates/env-creation-prod.yaml

#           - task: Ansible@0
#             displayName: Deploy using ansible
#             timeoutInMinutes: 6
#             inputs:
#               ansibleInterface: 'agentMachine'
#               playbookPathOnAgentMachine: '$(System.DefaultWorkingDirectory)/deploy.yaml'
#               inventoriesAgentMachine: 'noInventory'
#               args: '-e "env=$(Environment.Name) admin_password=$(VM-password)" --verbose'
#               failOnStdErr: false

#           - task: DeleteFiles@1
#             displayName: Delete .env file
#             inputs:
#               SourceFolder: '$(System.DefaultWorkingDirectory)'
#               Contents: '.env'
              


              
